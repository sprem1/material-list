import os
import math
import time
import tkinter as tk
from tkinter import Tk, Label, Entry, Button, filedialog, messagebox, StringVar, IntVar, BooleanVar, Radiobutton, Scrollbar, Frame, LEFT, RIGHT, Y, BOTH, Canvas, VERTICAL
from tkinter import ttk
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas as reportlab_canvas
from reportlab.lib.units import inch
from reportlab.platypus import Image
from reportlab.lib.utils import ImageReader 

# Define constants
TAX_RATE = 0.06
DUMP_FEE = 0  # Default value, now customizable
DELIVERY_FEE = 0 # Default value, now customizable
# Define material dictionary
material_dict = {
    "Landmark": {"conversion": 3, "shingle_multiplier": 3},
    "Landmark Pro": {"conversion": 3, "shingle_multiplier": 3},
    "CT Swiftstart (Starter): Perimeter, or same as drip edge, rakes and eaves)": {"conversion": 116},
    "CT Ridge Vent (per linear foot: Ridges)": {"conversion": 4},
    "Drip Edge F5(Perimeter)": {"conversion": 10},
    "Drip edge F8(Perimeter)": {"conversion": 10},
    "Shadow Hip/Ridge (Cap)": {"conversion": 28},
    "Roof Runner (underlayment: Surface Area)": {"conversion": 10},
    "Diamond Deck (underlayment: Surface Area)": {"conversion": 10},
    "GAF FELTBUSTER SYNTH (underlayment: Surface Area)": {"conversion": 10},
    "Ice and Water/MFG 2 sq (valleys and eaves)": {"conversion": 62},
    "Geocel/Vulkem (caulk)": {"conversion": 15},
    "Paint(1 per job)": {"conversion": 1},
    "Apron": {"conversion": 10},
    "Pipe Collar": {"conversion": 1},
    "Step Flashing": {"conversion": 25},
    "Snorkel Vent": {"conversion": 1},
    "750 Vent": {"conversion": 1},
    "Attic Vent": {"conversion": 1},
    "Coil Nail (per SQ)": {"conversion": 15},
    "3⁄4 Coil Nail (for sheds: per SQ)": {"conversion": 1},
    "3 Nail (per ridge)": {"conversion": 30},
    "Staple (per SQ)": {"conversion": 10},
    "Intake Vent Certain Teed": {"conversion": 4},
    "Intake Vent Generic": {"conversion": 3},
    "Apron Skylight Velux - Deck Mount": {"conversion": 10},
    "Apron Skylight Velux - Curb Mount": {"conversion": 10},
    "Apron Skylight Velux - Custom": {"conversion": 10},
    "CERT FLINTASTIC SA PLYBASE": {"conversion": 1},
    "CERT FLINTASTIC SA CAP BRNT SIEN 1SQ": {"conversion": 1},
    "GAF COBRA RIDGE VENT NAIL GUN": {"conversion" : 1},
    "GAF COBRA SNOW COUNTRY": {"conversion" : 1},
    "GAF Royal Sovereign": {"conversion" : 1},
    "Fiberglass strips": {"conversion" : 1},
    "GAF Timberline HD": {"conversion" : 1}
}

# Define material prices
material_prices = {
    "Landmark Pro": 41.85,
    "Landmark": 38.32,
    "CT Swiftstart (Starter): Perimeter, or same as drip edge, rakes and eaves)": 55.00,
    "CT Pro-Start (Starter)": 55.00,
    "CERT FLINTASTIC SA PLYBASE": 125.00,
    "CERT FLINTASTIC SA CAP BRNT SIEN 1SQ": 119.00,
    "CT Ridge Vent (per linear foot: Ridges)": 12.00,
    "GAF COBRA RIDGE VENT NAIL GUN": 88.50,
    "GAF COBRA SNOW COUNTRY": 11.75,
    "Drip Edge F5(Perimeter)": 7.50,
    "Drip edge F8(Perimeter)": 9.50,
    "Shadow Hip/Ridge (Cap)": 64.00,
    "Roof Runner (underlayment: Surface Area)": {"price": 85.25, "coverage": 10},
    "GAF Royal Sovereign": 35.65,
    "Fiberglass strips": 35.65,
    "GAF Timberline HD": 39.32,
    "Diamond Deck (underlayment: Surface Area)": 167.00,
    "GAF FELTBUSTER SYNTH (underlayment: Surface Area)": 121.50,
    "Ice and Water/MFG 2 sq (valleys and eaves)": {"price": 86.50},
    "Coil Nail (per SQ)": 45.00,
    "Staple (per SQ)": 8.25,
    "Geocel/Vulkem (caulk)": 5.95,
    "Paint(1 per job)": 8.00,
    "Apron": 13.00,
    "Pipe Collar": 0,
    "Step Flashing": 32.50,
    "750 Vent": 50.00,
    "Attic Vent": 800.00,
    "3 Nail (per ridge)": 14.99,
    "Plywood": 29.50,
}

class MaterialEntry:
    def __init__(self, master, material, row):
        self.master = master
        self.material = material
        self.row = row
        self.quantity_var = StringVar()
        self.waste_vars = {
            "0%": BooleanVar(),
            "10%": BooleanVar(),
            "15%": BooleanVar(),
            "20%": BooleanVar()
        }

        self.frame = tk.Frame(master)
        self.frame.pack(fill=tk.BOTH, expand=True, pady=2)

        # Material name label
        material_label = tk.Label(self.frame, text=material, width=20, anchor='w')
        material_label.pack(side=tk.LEFT, padx=5)

        # Quantity entry
        self.quantity_entry = tk.Entry(self.frame, textvariable=self.quantity_var, width=10)
        self.quantity_entry.pack(side=tk.LEFT, padx=5)

        # Waste percentage checkboxes
        self.waste_frame = tk.Frame(self.frame)
        self.waste_frame.pack(side=tk.LEFT)

        waste_options = [("0%", 0), ("10%", 10), ("15%", 15), ("20%", 20)]
        for text, value in waste_options:
            cb = tk.Checkbutton(self.waste_frame, text=text, variable=self.waste_vars[text])
            cb.pack(side=tk.LEFT, padx=2)
    def toggle_entry(self):
        if self.selected_var.get():
            self.quantity_entry.config(state=tk.NORMAL)
            for child in self.waste_frame.winfo_children():
                child.config(state=tk.NORMAL)
        else:
            self.quantity_entry.config(state=tk.DISABLED)
            for child in self.waste_frame.winfo_children():
                child.config(state=tk.DISABLED)         

    def get_quantity(self):
        try:
            return float(self.quantity_var.get())
        except ValueError:
            return 0

    def get_waste_factor(self):
        total_waste = sum(int(key[:-1]) for key, var in self.waste_vars.items() if var.get())
        return total_waste / 100

def calculate_cost(material, quantity, waste_factor, material_info, material_prices):
    """Calculates the total cost for a material based on quantity, price, and waste factor."""
    # Try to find an exact match first
    price_info = material_prices.get(material)
    
    # If no exact match, try partial matching
    if price_info is None:
        matching_keys = [key for key in material_prices.keys() if material.split()[0].lower() in key.lower()]
        if matching_keys:
            price_info = material_prices[matching_keys[0]]
            print(f"Warning: Using price for '{matching_keys[0]}' instead of '{material}'")
        else:
            print(f"Warning: Price for '{material}' not found.")
            return None

    if isinstance(price_info, dict):
        price = price_info.get("price")
    else:
        price = price_info

    if price is None:
        print(f"Warning: Price for '{material}' is not available.")
        return None

    # Apply waste factor to the quantity first
    adjusted_quantity = quantity * (1 + waste_factor)

    # Special handling for Landmark and Landmark Pro
    if material in ["Landmark", "Landmark Pro"]:
        # For Landmark and Landmark Pro, we multiply by 3 to get the number of bundles
        bundles_needed = adjusted_quantity * 3
        total_cost = bundles_needed * price
    else:
        # For other materials, use the conversion factor if available
        if "conversion" in material_info:
            units_needed = adjusted_quantity / material_info["conversion"]
        else:
            units_needed = adjusted_quantity
        total_cost = units_needed * price

    return total_cost




def generate_estimate():
    
    try:
        # Get user inputs
        material_quantities = {}
        for material in material_entries:
            quantity = material_entries[material].get_quantity()
            waste = material_entries[material].get_waste_factor()
            if quantity > 0:
                material_quantities[material] = (quantity, waste)

        if not material_quantities:
            messagebox.showerror("Error", "No materials selected.")
            return

        # Get labor cost per square foot
        try:
            labor_cost_per_sqft = float(labor_cost_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Invalid input for Labor Cost per Square Foot")
            return

        # Get dump fee
        try:
            dump_fee = float(dump_fee_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Invalid input for Dump Fee")
            return

        # Get delivery fee
        try:
            delivery_fee = float(delivery_fee_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Invalid input for Delivery Fee")
            return

        # Calculate total cost for each material and accumulate
        total_cost = 0
        material_costs = {}
        for material, (quantity, waste) in material_quantities.items():
            cost = calculate_cost(material, quantity, waste, material_dict[material], material_prices)
            if cost is not None:
                total_cost += cost
                material_costs[material] = (quantity, cost) 

        # Add dump fee and delivery fee
        total_cost += dump_fee + delivery_fee

        # Calculate labor cost
        try:
            total_sqft = float(total_sqft_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Invalid input for Total Square Footage")
            return

        labor_cost = labor_cost_per_sqft * total_sqft
        total_cost += labor_cost

        # Calculate tax
        tax = total_cost * TAX_RATE
        total_cost += tax

        # Get Sean's number
        try:
            seans_number = float(seans_number_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Invalid input for Sean's Number")
            return

        # Calculate profit
        profit = calculate_profit(total_cost, total_sqft, seans_number)

        # Get customer information
        customer_name = customer_name_entry.get()
        job_name = job_name_entry.get()

        # Ask user to select a logo file
        logo_path = filedialog.askopenfilename(title="Select Logo", filetypes=[("PNG files", "*.png"), ("All files", "*.*")])

        # Ask user to choose the name and location for the PDF file
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        default_filename = f"estimate_{customer_name}_{job_name}_{timestamp}.pdf"
        filename = filedialog.asksaveasfilename(
            title="Save Estimate PDF",
            initialfile=default_filename,
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )

        if not filename:  # If user cancels the file dialog
            messagebox.showinfo("Cancelled", "PDF generation cancelled.")
            return

        # Generate PDF file
        generate_pdf(filename, customer_name, job_name, material_costs, labor_cost, dump_fee, delivery_fee, tax, total_cost, profit, logo_path)

        messagebox.showinfo("Success", f"Estimate generated and saved as {filename}")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")



def calculate_profit(total_cost, total_sqft, seans_number):
    if seans_number <= 0:
        return 0
    profit = total_cost - seans_number * total_sqft
    return profit

def add_logo(canvas, logo_path, width=100):
    try:
        img = ImageReader(logo_path)
        iw, ih = img.getSize()
        aspect = ih / float(iw)
        page_width, page_height = letter
        
        # Position the logo on the far right
        x = page_width - width - 50  # 50 points from the right edge
        y = page_height - (width * aspect) - 50  # 50 points from the top
        
        canvas.drawImage(logo_path, x, y, width=width, height=(width * aspect))
    except Exception as e:
        print(f"Error adding logo: {e}")

def generate_pdf(filename, customer_name, job_name, material_costs, labor_cost, dump_fee, delivery_fee, tax, total_cost, profit, logo_path):
    try:
        # Create a PDF canvas
        c = reportlab_canvas.Canvas(filename, pagesize=letter)
        width, height = letter

        # Add logo
        if logo_path:
            add_logo(c, logo_path, width=100)

        # Add header
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 50, "Estimate")
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 70, f"Customer: {customer_name}")
        c.drawString(50, height - 90, f"Job: {job_name}")
        c.drawString(50, height - 110, f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")

        # Add materials, quantities, and costs
        y = height - 200
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "Materials, Quantities, and Costs")
        c.setFont("Helvetica", 12)
        y -= 20

        for material, (quantity, cost) in material_costs.items():
            c.drawString(50, y, f"{material}: {quantity} units - ${cost:.2f}")
            y -= 20

        # Add labor cost, dump fee, delivery fee, tax, total cost, and profit
        y -= 20
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, f"Labor Cost: ${labor_cost:.2f}")
        y -= 20
        c.drawString(50, y, f"Dump Fee: ${dump_fee:.2f}")
        y -= 20
        c.drawString(50, y, f"Delivery Fee: ${delivery_fee:.2f}")
        y -= 20
        c.drawString(50, y, f"Tax: ${tax:.2f}")
        y -= 20
        c.drawString(50, y, f"Total Cost: ${total_cost:.2f}")
        y -= 20
        c.drawString(50, y, f"Profit: ${profit:.2f}")

        c.showPage()
        c.save()
    except Exception as e:
        print(f"An error occurred while generating the PDF: {e}")
        raise


def create_material_entries(frame, materials):
    entries = {}
    for row, material in enumerate(materials):
        entries[material] = MaterialEntry(frame, material, row)
    return entries

# Initialize Tkinter window
root = Tk()
root.title("Estimate Generator")

# Customer information
Label(root, text="Customer Name:").pack(padx=5, pady=5)
customer_name_entry = Entry(root)
customer_name_entry.pack(padx=5, pady=5)

Label(root, text="Job Name:").pack(padx=5, pady=5)
job_name_entry = Entry(root)
job_name_entry.pack(padx=5, pady=5)

Label(root, text="Total Square Footage:").pack(padx=5, pady=5)
total_sqft_entry = Entry(root)
total_sqft_entry.pack(padx=5, pady=5)

Label(root, text="Labor Cost per Square Foot:").pack(padx=5, pady=5)
labor_cost_entry = Entry(root)
labor_cost_entry.pack(padx=5, pady=5)

Label(root, text="Sean's Number:").pack(padx=5, pady=5)
seans_number_entry = Entry(root)
seans_number_entry.pack(padx=5, pady=5)

Label(root, text="Dump Fee:").pack(padx=5, pady=5)
dump_fee_entry = Entry(root)
dump_fee_entry.pack(padx=5, pady=5)
dump_fee_entry.insert(0, str(DUMP_FEE))  # Set default value

Label(root, text="Delivery Fee:").pack(padx=5, pady=5)
delivery_fee_entry = Entry(root)
delivery_fee_entry.pack(padx=5, pady=5)
delivery_fee_entry.insert(0, str(DELIVERY_FEE))  # Set default value


# Create a frame for the content with a scrollbar
content_frame = Frame(root)
content_frame.pack(fill=BOTH, expand=True, padx=5, pady=5)

canvas = Canvas(content_frame)
scrollbar = Scrollbar(content_frame, orient=VERTICAL, command=canvas.yview)
scrollable_frame = Frame(canvas)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(
        scrollregion=canvas.bbox("all")
    )
)

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side=LEFT, fill=BOTH, expand=True)
scrollbar.pack(side=RIGHT, fill=Y)

# Create material entries
material_entries = create_material_entries(scrollable_frame, material_dict.keys())

# Generate estimate button
generate_button = Button(root, text="Generate Estimate", command=generate_estimate)
generate_button.pack(padx=5, pady=10)

root.mainloop()
